{{ $fullname := include "common.names.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
      {{- if .Values.podLabels }}
      {{- include "common.tplvalues.render" ( dict "value" .Values.podLabels "context" $ ) | nindent 8 }}
      {{- end }}

      {{- if .Values.podAnnotations }}
      annotations:
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
        # THE_COALITION_CHANGE (manuvar@microsoft.com) - BEGIN Option to force the pods to restart
        {{- if .Values.podForceRestart }}
        rollme: {{ randAlphaNum 5 | quote }}
        {{- end }}
        # THE_COALITION_CHANGE (manuvar@microsoft.com) - END Option to force the pods to restart
      {{- end }}
    spec:
      serviceAccountName: {{ include "jupiter.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ include "common.names.name" . }}
        image: {{ printf "%s:%s" .Values.image.repository (include "jupiter.appversion" . ) }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: Kubernetes__Namespace
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- if .Values.env }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.env "context" $ ) | nindent 8 }}
        {{- end }}
        ports:
        - name: http
          containerPort: 80
        - name: corp-http
          containerPort: 8008
        - name: internal-http
          containerPort: 8080
        - name: http2
          containerPort: 8081
        - name: corp-http2
          containerPort: 8082
        - name: internal-http2
          containerPort: 8083
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ default "health/liveness" .Values.livenessProbe.path }}
            port: http
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path:  {{ default "health/readiness" .Values.readinessProbe.path }}
            port: http
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 12 }}
        {{- end }}
        volumeMounts:
        - name: config-volume
          mountPath: /config
        {{- if .Values.useDotnetMonitorSidecar }}
        - name: diagnostics
          mountPath: /tmp
        {{- end }}
        {{- if or .Values.persistence.volume .Values.persistence.enabled }}
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
        {{- end }}
        # THE_COALITION_CHANGE (manuvar@microsoft.com) - BEGIN Secret store support
        {{- if .Values.secretStore.enabled }}
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true        
        {{- end }}
        # THE_COALITION_CHANGE (manuvar@microsoft.com) - END Secret store support
          {{- if .Values.extraVolumeMounts }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.extraVolumeMounts "context" $) | nindent 8 }}
          {{- end }}
    {{- if .Values.useDotnetMonitorSidecar }}
      - name: sidecar
        image: mcr.microsoft.com/dotnet/monitor:6.0.2
        args: ["--urls", "http://*:52323", "--no-auth"]
        volumeMounts:
          - name: diagnostics
            mountPath: /tmp
    {{- end }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ $fullname }}
    {{- if .Values.useDotnetMonitorSidecar }}
      - name: diagnostics
        emptyDir: {}
    {{- end }}
      {{- if or .Values.persistence.enabled .Values.persistence.volume }}
      - name: data
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ include "common.names.fullname" . }}{{- end }}
        {{- else if .Values.persistence.volume }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.persistence.volume "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      # THE_COALITION_CHANGE (manuvar@microsoft.com) - BEGIN Secret store support
      {{- if .Values.secretStore.enabled }}
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ default "horde-secret-provider" .Values.secretStore.secretProviderName }}
      {{- end }}
      # THE_COALITION_CHANGE (manuvar@microsoft.com) - END Secret store support
      {{- if .Values.extraVolumes }}
      {{- include "common.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $) | nindent 6 }}
      {{- end }}